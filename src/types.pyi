class MathStructure:
    def compare(self, other: MathStructure) -> ComparisonResult: ...
    def compare_approximately(
        self, other: MathStructure, options: EvaluationOptions = ...
    ) -> ComparisonResult: ...
    def calculate(
        self, options: EvaluationOptions = ..., to: str = ""
    ) -> MathStructure: ...
    def print(self, options: PrintOptions = ...) -> str: ...
    def __eq__(self, __value: object) -> bool: ...

def calculate(
    expression: MathStructure | str, options: EvaluationOptions = ..., to: str = ""
) -> MathStructure: ...
def calculate_and_print(
    expression: str,
    eval_options: EvaluationOptions = ...,
    print_options: PrintOptions = ...,
) -> str: ...
def get_global_evaluation_options() -> EvaluationOptions: ...
def get_global_parse_options() -> ParseOptions: ...
def get_global_print_options() -> PrintOptions: ...
def get_global_sort_options() -> SortOptions: ...
def get_message_print_options() -> PrintOptions: ...
def get_precision() -> int: ...
def load_global_currencies() -> None: ...
def load_global_dataSets() -> None: ...
def load_global_functions() -> None: ...
def load_global_prefixes() -> None: ...
def load_global_units() -> None: ...
def load_global_variables() -> None: ...
def parse(value: str) -> MathStructure: ...
def set_global_evaluation_options(arg0: EvaluationOptions) -> None: ...
def set_global_parse_options(arg0: ParseOptions) -> None: ...
def set_global_print_options(arg0: PrintOptions) -> None: ...
def set_global_sort_options(arg0: SortOptions) -> None: ...
def set_message_print_options(arg0: PrintOptions) -> None: ...
def set_precision(arg0: int) -> None: ...

class Message:
    @property
    def text(self) -> str: ...
    @property
    def type(self) -> MessageType: ...

def take_messages() -> list[Message]: ...
